// <auto-generated />
using System;
using ESys.Db.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ESys.Db.PostgreSQL.TenantSlave
{
    [DbContext(typeof(TenantSlaveDbContext))]
    [Migration("20250221141450_v0.0.4")]
    partial class v004
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ESys.Infrastructure.Entity.EnvironmentalSensorDaily", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AirPressureAvg")
                        .HasColumnType("integer")
                        .HasColumnName("pre_avg");

                    b.Property<int>("AirPressureMax")
                        .HasColumnType("integer")
                        .HasColumnName("pre_max");

                    b.Property<int>("AirPressureMin")
                        .HasColumnType("integer")
                        .HasColumnName("pre_min");

                    b.Property<int>("CPMAvg")
                        .HasColumnType("integer")
                        .HasColumnName("cpm");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("integer")
                        .HasColumnName("device_of_data");

                    b.Property<int>("HumidityAvg")
                        .HasColumnType("integer")
                        .HasColumnName("humidity_average");

                    b.Property<int>("HumidityMax")
                        .HasColumnType("integer")
                        .HasColumnName("humidity_max");

                    b.Property<int>("HumidityMin")
                        .HasColumnType("integer")
                        .HasColumnName("humidity_min");

                    b.Property<int>("NoiseAvg")
                        .HasColumnType("integer")
                        .HasColumnName("noise_average");

                    b.Property<int>("NoiseMax")
                        .HasColumnType("integer")
                        .HasColumnName("noise_max");

                    b.Property<int>("NoiseMin")
                        .HasColumnType("integer")
                        .HasColumnName("noise_min");

                    b.Property<int>("ParticulateMatterAvg")
                        .HasColumnType("integer")
                        .HasColumnName("tsp_average");

                    b.Property<int>("ParticulateMatterMax")
                        .HasColumnType("integer")
                        .HasColumnName("tsp_max");

                    b.Property<int>("ParticulateMatterMin")
                        .HasColumnType("integer")
                        .HasColumnName("tsp_min");

                    b.Property<int>("TemperatureAvg")
                        .HasColumnType("integer")
                        .HasColumnName("temperature_average");

                    b.Property<int>("TemperatureMax")
                        .HasColumnType("integer")
                        .HasColumnName("temperature_max");

                    b.Property<int>("TemperatureMin")
                        .HasColumnType("integer")
                        .HasColumnName("temperature_min");

                    b.Property<int>("WindDirectionAvg")
                        .HasColumnType("integer")
                        .HasColumnName("wind_direction_average");

                    b.Property<int>("WindDirectionMax")
                        .HasColumnType("integer")
                        .HasColumnName("wind_direction_max");

                    b.Property<int>("WindDirectionMin")
                        .HasColumnType("integer")
                        .HasColumnName("wind_direction_min");

                    b.Property<int>("WindSpeedAvg")
                        .HasColumnType("integer")
                        .HasColumnName("wind_speed_average");

                    b.Property<int>("WindSpeedMax")
                        .HasColumnType("integer")
                        .HasColumnName("wind_speed_max");

                    b.Property<int>("WindSpeedMin")
                        .HasColumnType("integer")
                        .HasColumnName("wind_speed_min");

                    b.Property<int>("dust_calibration_step")
                        .HasColumnType("integer")
                        .HasColumnName("dust_calibration_step");

                    b.Property<int>("equipment_data_valid_flag")
                        .HasColumnType("integer")
                        .HasColumnName("equipment_data_valid_flag");

                    b.Property<bool>("is_power_on")
                        .HasColumnType("boolean")
                        .HasColumnName("is_power_on");

                    b.Property<bool>("is_valid_data")
                        .HasColumnType("boolean")
                        .HasColumnName("is_valid_data");

                    b.Property<int>("pm10_average")
                        .HasColumnType("integer")
                        .HasColumnName("pm10_average");

                    b.Property<int>("pm10_max")
                        .HasColumnType("integer")
                        .HasColumnName("pm10_max");

                    b.Property<int>("pm10_min")
                        .HasColumnType("integer")
                        .HasColumnName("pm10_min");

                    b.Property<int>("pm2_5_average")
                        .HasColumnType("integer")
                        .HasColumnName("pm2_5_average");

                    b.Property<int>("pm2_5_max")
                        .HasColumnType("integer")
                        .HasColumnName("pm2_5_max");

                    b.Property<int>("pm2_5_min")
                        .HasColumnType("integer")
                        .HasColumnName("pm2_5_min");

                    b.Property<int>("source_of_data")
                        .HasColumnType("integer")
                        .HasColumnName("source_of_data");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.ToTable("EnvironmentalSensorDaily");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.EnvironmentalSensorHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AirPressureAvg")
                        .HasColumnType("integer")
                        .HasColumnName("pre_avg");

                    b.Property<int>("AirPressureMax")
                        .HasColumnType("integer")
                        .HasColumnName("pre_max");

                    b.Property<int>("AirPressureMin")
                        .HasColumnType("integer")
                        .HasColumnName("pre_min");

                    b.Property<int>("CPMAvg")
                        .HasColumnType("integer")
                        .HasColumnName("cpm");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("integer")
                        .HasColumnName("device_of_data");

                    b.Property<int>("HumidityAvg")
                        .HasColumnType("integer")
                        .HasColumnName("humidity_average");

                    b.Property<int>("HumidityMax")
                        .HasColumnType("integer")
                        .HasColumnName("humidity_max");

                    b.Property<int>("HumidityMin")
                        .HasColumnType("integer")
                        .HasColumnName("humidity_min");

                    b.Property<int>("NoiseAvg")
                        .HasColumnType("integer")
                        .HasColumnName("noise_average");

                    b.Property<int>("NoiseMax")
                        .HasColumnType("integer")
                        .HasColumnName("noise_max");

                    b.Property<int>("NoiseMin")
                        .HasColumnType("integer")
                        .HasColumnName("noise_min");

                    b.Property<int>("ParticulateMatterAvg")
                        .HasColumnType("integer")
                        .HasColumnName("tsp_average");

                    b.Property<int>("ParticulateMatterMax")
                        .HasColumnType("integer")
                        .HasColumnName("tsp_max");

                    b.Property<int>("ParticulateMatterMin")
                        .HasColumnType("integer")
                        .HasColumnName("tsp_min");

                    b.Property<int>("TemperatureAvg")
                        .HasColumnType("integer")
                        .HasColumnName("temperature_average");

                    b.Property<int>("TemperatureMax")
                        .HasColumnType("integer")
                        .HasColumnName("temperature_max");

                    b.Property<int>("TemperatureMin")
                        .HasColumnType("integer")
                        .HasColumnName("temperature_min");

                    b.Property<int>("WindDirectionAvg")
                        .HasColumnType("integer")
                        .HasColumnName("wind_direction_average");

                    b.Property<int>("WindDirectionMax")
                        .HasColumnType("integer")
                        .HasColumnName("wind_direction_max");

                    b.Property<int>("WindDirectionMin")
                        .HasColumnType("integer")
                        .HasColumnName("wind_direction_min");

                    b.Property<int>("WindSpeedAvg")
                        .HasColumnType("integer")
                        .HasColumnName("wind_speed_average");

                    b.Property<int>("WindSpeedMax")
                        .HasColumnType("integer")
                        .HasColumnName("wind_speed_max");

                    b.Property<int>("WindSpeedMin")
                        .HasColumnType("integer")
                        .HasColumnName("wind_speed_min");

                    b.Property<int>("dust_calibration_step")
                        .HasColumnType("integer")
                        .HasColumnName("dust_calibration_step");

                    b.Property<int>("equipment_data_valid_flag")
                        .HasColumnType("integer")
                        .HasColumnName("equipment_data_valid_flag");

                    b.Property<bool>("is_power_on")
                        .HasColumnType("boolean")
                        .HasColumnName("is_power_on");

                    b.Property<bool>("is_valid_data")
                        .HasColumnType("boolean")
                        .HasColumnName("is_valid_data");

                    b.Property<int>("pm10_average")
                        .HasColumnType("integer")
                        .HasColumnName("pm10_average");

                    b.Property<int>("pm10_max")
                        .HasColumnType("integer")
                        .HasColumnName("pm10_max");

                    b.Property<int>("pm10_min")
                        .HasColumnType("integer")
                        .HasColumnName("pm10_min");

                    b.Property<int>("pm2_5_average")
                        .HasColumnType("integer")
                        .HasColumnName("pm2_5_average");

                    b.Property<int>("pm2_5_max")
                        .HasColumnType("integer")
                        .HasColumnName("pm2_5_max");

                    b.Property<int>("pm2_5_min")
                        .HasColumnType("integer")
                        .HasColumnName("pm2_5_min");

                    b.Property<int>("source_of_data")
                        .HasColumnType("integer")
                        .HasColumnName("source_of_data");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.ToTable("EnvironmentalSensorHour");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.EnvironmentalSensorMinute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AirPressureAvg")
                        .HasColumnType("integer")
                        .HasColumnName("pre_avg");

                    b.Property<int>("AirPressureMax")
                        .HasColumnType("integer")
                        .HasColumnName("pre_max");

                    b.Property<int>("AirPressureMin")
                        .HasColumnType("integer")
                        .HasColumnName("pre_min");

                    b.Property<int>("CPMAvg")
                        .HasColumnType("integer")
                        .HasColumnName("cpm");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("integer")
                        .HasColumnName("device_of_data");

                    b.Property<int>("HumidityAvg")
                        .HasColumnType("integer")
                        .HasColumnName("humidity_average");

                    b.Property<int>("HumidityMax")
                        .HasColumnType("integer")
                        .HasColumnName("humidity_max");

                    b.Property<int>("HumidityMin")
                        .HasColumnType("integer")
                        .HasColumnName("humidity_min");

                    b.Property<int>("NoiseAvg")
                        .HasColumnType("integer")
                        .HasColumnName("noise_average");

                    b.Property<int>("NoiseMax")
                        .HasColumnType("integer")
                        .HasColumnName("noise_max");

                    b.Property<int>("NoiseMin")
                        .HasColumnType("integer")
                        .HasColumnName("noise_min");

                    b.Property<int>("ParticulateMatterAvg")
                        .HasColumnType("integer")
                        .HasColumnName("tsp_average");

                    b.Property<int>("ParticulateMatterMax")
                        .HasColumnType("integer")
                        .HasColumnName("tsp_max");

                    b.Property<int>("ParticulateMatterMin")
                        .HasColumnType("integer")
                        .HasColumnName("tsp_min");

                    b.Property<int>("TemperatureAvg")
                        .HasColumnType("integer")
                        .HasColumnName("temperature_average");

                    b.Property<int>("TemperatureMax")
                        .HasColumnType("integer")
                        .HasColumnName("temperature_max");

                    b.Property<int>("TemperatureMin")
                        .HasColumnType("integer")
                        .HasColumnName("temperature_min");

                    b.Property<int>("WindDirectionAvg")
                        .HasColumnType("integer")
                        .HasColumnName("wind_direction_average");

                    b.Property<int>("WindDirectionMax")
                        .HasColumnType("integer")
                        .HasColumnName("wind_direction_max");

                    b.Property<int>("WindDirectionMin")
                        .HasColumnType("integer")
                        .HasColumnName("wind_direction_min");

                    b.Property<int>("WindSpeedAvg")
                        .HasColumnType("integer")
                        .HasColumnName("wind_speed_average");

                    b.Property<int>("WindSpeedMax")
                        .HasColumnType("integer")
                        .HasColumnName("wind_speed_max");

                    b.Property<int>("WindSpeedMin")
                        .HasColumnType("integer")
                        .HasColumnName("wind_speed_min");

                    b.Property<int>("dust_calibration_step")
                        .HasColumnType("integer")
                        .HasColumnName("dust_calibration_step");

                    b.Property<int>("equipment_data_valid_flag")
                        .HasColumnType("integer")
                        .HasColumnName("equipment_data_valid_flag");

                    b.Property<bool>("is_power_on")
                        .HasColumnType("boolean")
                        .HasColumnName("is_power_on");

                    b.Property<bool>("is_valid_data")
                        .HasColumnType("boolean")
                        .HasColumnName("is_valid_data");

                    b.Property<int>("pm10_average")
                        .HasColumnType("integer")
                        .HasColumnName("pm10_average");

                    b.Property<int>("pm10_max")
                        .HasColumnType("integer")
                        .HasColumnName("pm10_max");

                    b.Property<int>("pm10_min")
                        .HasColumnType("integer")
                        .HasColumnName("pm10_min");

                    b.Property<int>("pm2_5_average")
                        .HasColumnType("integer")
                        .HasColumnName("pm2_5_average");

                    b.Property<int>("pm2_5_max")
                        .HasColumnType("integer")
                        .HasColumnName("pm2_5_max");

                    b.Property<int>("pm2_5_min")
                        .HasColumnType("integer")
                        .HasColumnName("pm2_5_min");

                    b.Property<int>("source_of_data")
                        .HasColumnType("integer")
                        .HasColumnName("source_of_data");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.ToTable("EnvironmentalSensorMinute");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.EnvironmentalSensorQuarter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AirPressureAvg")
                        .HasColumnType("integer")
                        .HasColumnName("pre_avg");

                    b.Property<int>("AirPressureMax")
                        .HasColumnType("integer")
                        .HasColumnName("pre_max");

                    b.Property<int>("AirPressureMin")
                        .HasColumnType("integer")
                        .HasColumnName("pre_min");

                    b.Property<int>("CPMAvg")
                        .HasColumnType("integer")
                        .HasColumnName("cpm");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("integer")
                        .HasColumnName("device_of_data");

                    b.Property<int>("HumidityAvg")
                        .HasColumnType("integer")
                        .HasColumnName("humidity_average");

                    b.Property<int>("HumidityMax")
                        .HasColumnType("integer")
                        .HasColumnName("humidity_max");

                    b.Property<int>("HumidityMin")
                        .HasColumnType("integer")
                        .HasColumnName("humidity_min");

                    b.Property<int>("NoiseAvg")
                        .HasColumnType("integer")
                        .HasColumnName("noise_average");

                    b.Property<int>("NoiseMax")
                        .HasColumnType("integer")
                        .HasColumnName("noise_max");

                    b.Property<int>("NoiseMin")
                        .HasColumnType("integer")
                        .HasColumnName("noise_min");

                    b.Property<int>("ParticulateMatterAvg")
                        .HasColumnType("integer")
                        .HasColumnName("tsp_average");

                    b.Property<int>("ParticulateMatterMax")
                        .HasColumnType("integer")
                        .HasColumnName("tsp_max");

                    b.Property<int>("ParticulateMatterMin")
                        .HasColumnType("integer")
                        .HasColumnName("tsp_min");

                    b.Property<int>("TemperatureAvg")
                        .HasColumnType("integer")
                        .HasColumnName("temperature_average");

                    b.Property<int>("TemperatureMax")
                        .HasColumnType("integer")
                        .HasColumnName("temperature_max");

                    b.Property<int>("TemperatureMin")
                        .HasColumnType("integer")
                        .HasColumnName("temperature_min");

                    b.Property<int>("WindDirectionAvg")
                        .HasColumnType("integer")
                        .HasColumnName("wind_direction_average");

                    b.Property<int>("WindDirectionMax")
                        .HasColumnType("integer")
                        .HasColumnName("wind_direction_max");

                    b.Property<int>("WindDirectionMin")
                        .HasColumnType("integer")
                        .HasColumnName("wind_direction_min");

                    b.Property<int>("WindSpeedAvg")
                        .HasColumnType("integer")
                        .HasColumnName("wind_speed_average");

                    b.Property<int>("WindSpeedMax")
                        .HasColumnType("integer")
                        .HasColumnName("wind_speed_max");

                    b.Property<int>("WindSpeedMin")
                        .HasColumnType("integer")
                        .HasColumnName("wind_speed_min");

                    b.Property<int>("dust_calibration_step")
                        .HasColumnType("integer")
                        .HasColumnName("dust_calibration_step");

                    b.Property<int>("equipment_data_valid_flag")
                        .HasColumnType("integer")
                        .HasColumnName("equipment_data_valid_flag");

                    b.Property<bool>("is_power_on")
                        .HasColumnType("boolean")
                        .HasColumnName("is_power_on");

                    b.Property<bool>("is_valid_data")
                        .HasColumnType("boolean")
                        .HasColumnName("is_valid_data");

                    b.Property<int>("pm10_average")
                        .HasColumnType("integer")
                        .HasColumnName("pm10_average");

                    b.Property<int>("pm10_max")
                        .HasColumnType("integer")
                        .HasColumnName("pm10_max");

                    b.Property<int>("pm10_min")
                        .HasColumnType("integer")
                        .HasColumnName("pm10_min");

                    b.Property<int>("pm2_5_average")
                        .HasColumnType("integer")
                        .HasColumnName("pm2_5_average");

                    b.Property<int>("pm2_5_max")
                        .HasColumnType("integer")
                        .HasColumnName("pm2_5_max");

                    b.Property<int>("pm2_5_min")
                        .HasColumnType("integer")
                        .HasColumnName("pm2_5_min");

                    b.Property<int>("source_of_data")
                        .HasColumnType("integer")
                        .HasColumnName("source_of_data");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.ToTable("EnvironmentalSensorQuarter");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("CalibrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("CalibrationValue")
                        .HasPrecision(20, 6)
                        .HasColumnType("numeric(20,6)");

                    b.Property<string>("ControlNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("EquipmentConfigId")
                        .HasColumnType("integer");

                    b.Property<int?>("EquipmentTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOperation")
                        .HasColumnType("boolean");

                    b.Property<string>("Latitude")
                        .HasColumnType("text");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Longitude")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset?>("NextCalibrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentConfigId")
                        .IsUnique();

                    b.HasIndex("EquipmentTypeId");

                    b.HasIndex("LocationId");

                    b.HasIndex("Name");

                    b.HasIndex("SerialNumber");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.EquipmentConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalConfig")
                        .HasColumnType("text");

                    b.Property<string>("Barcode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("EquipmentConfig");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.EquipmentConfigAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte>("Action")
                        .HasColumnType("smallint");

                    b.Property<string>("AdditionalConfig")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("AuditTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("EquipmentConfigAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.EquipmentNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EquipmentId")
                        .HasColumnType("integer")
                        .HasColumnName("device_id");

                    b.Property<bool>("IsAlert")
                        .HasColumnType("boolean")
                        .HasColumnName("alert_mode");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone_address");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("EquipmentId", "Phone")
                        .IsUnique();

                    b.ToTable("EquipmentNotification");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.EquipmentTPM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("BeforeEquipmentQualified")
                        .HasColumnType("boolean");

                    b.Property<string>("BeforeFlow1")
                        .HasColumnType("text");

                    b.Property<string>("BeforeFlow2")
                        .HasColumnType("text");

                    b.Property<string>("BeforeFlow3")
                        .HasColumnType("text");

                    b.Property<string>("BeforeRelativeError")
                        .HasColumnType("text");

                    b.Property<bool>("BeforeSetFlow")
                        .HasColumnType("boolean");

                    b.Property<string>("BehindCalibration")
                        .HasColumnType("text");

                    b.Property<bool>("BehindEquipmentQualified")
                        .HasColumnType("boolean");

                    b.Property<string>("BehindEquipmentRelativeError")
                        .HasColumnType("text");

                    b.Property<string>("BehindFlow1")
                        .HasColumnType("text");

                    b.Property<string>("BehindFlow2")
                        .HasColumnType("text");

                    b.Property<string>("BehindFlow3")
                        .HasColumnType("text");

                    b.Property<string>("BehindRelativeError")
                        .HasColumnType("text");

                    b.Property<bool>("BehindSetFlow")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("C1EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("C1StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("C2EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("C2StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CalibrationZero")
                        .HasColumnType("text");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("DataTransmissionIsError")
                        .HasColumnType("boolean");

                    b.Property<string>("DataTransmissionMsg")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionC1")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionC2")
                        .HasColumnType("text");

                    b.Property<bool>("DeviceIsError")
                        .HasColumnType("boolean");

                    b.Property<string>("DeviceLocation")
                        .HasColumnType("text");

                    b.Property<string>("DeviceMsg")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("EnvironmentIsError")
                        .HasColumnType("boolean");

                    b.Property<string>("EnvironmentMsg")
                        .HasColumnType("text");

                    b.Property<string>("EquipmentControlNumber")
                        .HasColumnType("text");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("integer");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("text");

                    b.Property<string>("EquipmentReal1")
                        .HasColumnType("text");

                    b.Property<string>("EquipmentReal2")
                        .HasColumnType("text");

                    b.Property<string>("EquipmentReal3")
                        .HasColumnType("text");

                    b.Property<string>("EquipmentRelativeError")
                        .HasColumnType("text");

                    b.Property<string>("EquipmentSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("EquipmentSpan")
                        .HasColumnType("text");

                    b.Property<string>("EquipmentZero")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("PowerSupplyIsError")
                        .HasColumnType("boolean");

                    b.Property<string>("PowerSupplyMsg")
                        .HasColumnType("text");

                    b.Property<string>("ProjectNumber")
                        .HasColumnType("text");

                    b.Property<int>("RemainSecond")
                        .HasColumnType("integer");

                    b.Property<string>("ResetC1Equipment")
                        .HasColumnType("text");

                    b.Property<string>("ResetC2Equipment")
                        .HasColumnType("text");

                    b.Property<bool>("ResetEquipment")
                        .HasColumnType("boolean");

                    b.Property<string>("ResetEquipmentMsg")
                        .HasColumnType("text");

                    b.Property<bool>("SampleIsNormal")
                        .HasColumnType("boolean");

                    b.Property<string>("SampleMsg")
                        .HasColumnType("text");

                    b.Property<string>("SetFlow")
                        .HasColumnType("text");

                    b.Property<string>("SetFlow2")
                        .HasColumnType("text");

                    b.Property<int>("Stage")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TemperatureData")
                        .HasColumnType("text");

                    b.Property<string>("TemperatureMsg")
                        .HasColumnType("text");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<bool>("VedioIsError")
                        .HasColumnType("boolean");

                    b.Property<string>("VedioMsg")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentControlNumber");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("Name");

                    b.ToTable("EquipmentTPM");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.EquipmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LoadingMode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Model")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Description");

                    b.ToTable("EquipmentType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Description = "绿林粉尘仪",
                            IsActive = true,
                            Version = 0
                        },
                        new
                        {
                            Id = 2,
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Description = "朗亿粉尘仪",
                            IsActive = true,
                            Version = 0
                        });
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.EquipmentV", b =>
                {
                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CalibrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("CalibrationValue")
                        .HasPrecision(20, 6)
                        .HasColumnType("numeric(20,6)");

                    b.Property<string>("ControlNumber")
                        .HasColumnType("text");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("integer");

                    b.Property<string>("EquipmentTypeDescription")
                        .HasColumnType("text");

                    b.Property<int>("EquipmentTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LocationBreadcrumb")
                        .HasColumnType("text");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("LocationName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("NextCalibrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PerformedBy")
                        .HasColumnType("text");

                    b.Property<int?>("PerformedByUserId")
                        .HasColumnType("integer");

                    b.Property<string>("UOM")
                        .HasColumnType("text");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.ToView("EquipmentV");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Code")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("LocationTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("VisioDiagramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LocationTypeId");

                    b.HasIndex("Name");

                    b.HasIndex("ParentId");

                    b.HasIndex("VisioDiagramId");

                    b.HasIndex("Id", "ParentId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LocationAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte>("Action")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("AuditTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("LocationTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("VisioDiagramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("LocationAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LocationExtra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Breadcrumb")
                        .HasColumnType("text");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("LocationPath")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.ToTable("LocationExtra");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LocationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Weight")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("Name", "Description", "IsActive");

                    b.ToTable("LocationType");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LocationTypeAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte>("Action")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("AuditTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Weight")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("LocationTypeAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LocationV", b =>
                {
                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<string>("Breadcrumb")
                        .HasColumnType("text");

                    b.Property<int?>("ClassificationId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("LocationPath")
                        .HasColumnType("text");

                    b.Property<int>("LocationTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int?>("SecondClassificationId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("VisioDiagramId")
                        .HasColumnType("integer");

                    b.ToView("LocationV");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Map", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int?>("MapCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Path")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MapCategoryId");

                    b.ToTable("Map");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.MapAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte>("Action")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("AuditTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int?>("MapCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("MapAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.MapCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("MapCategory");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.MapCategoryAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte>("Action")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("AuditTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("MapCategoryAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("ChainOfCustody")
                        .HasColumnType("boolean");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("ProductTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.ProductAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte>("Action")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("AuditTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("ChainOfCustody")
                        .HasColumnType("boolean");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("ProductTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ProductAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("ProductType");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.ProductTypeAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte>("Action")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("AuditTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ProductTypeAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SiteTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("SiteTypeId");

                    b.HasIndex("IsActive", "LocationId", "Id");

                    b.HasIndex("LocationId", "Id", "Name");

                    b.ToTable("Site");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.SiteAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte>("Action")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("AuditTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SiteTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("SiteAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.SiteType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("SiteType");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.SiteTypeAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte>("Action")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("AuditTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("SiteTypeAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.SiteV", b =>
                {
                    b.Property<string>("BarCode")
                        .HasColumnType("text");

                    b.Property<string>("ClassificationDesc")
                        .HasColumnType("text");

                    b.Property<int?>("ClassificationId")
                        .HasColumnType("integer");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LocationBreadcrumb")
                        .HasColumnType("text");

                    b.Property<string>("LocationDesc")
                        .HasColumnType("text");

                    b.Property<string>("LocationFullName")
                        .HasColumnType("text");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("LocationName")
                        .HasColumnType("text");

                    b.Property<string>("SecondClassificationDesc")
                        .HasColumnType("text");

                    b.Property<int?>("SecondClassificationId")
                        .HasColumnType("integer");

                    b.Property<string>("SiteDesc")
                        .HasColumnType("text");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer");

                    b.Property<string>("SiteName")
                        .HasColumnType("text");

                    b.Property<string>("SiteTypeDesc")
                        .HasColumnType("text");

                    b.Property<int>("SiteTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.ToView("SiteV");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.VisioDiagram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("MapId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.ToTable("VisioDiagram");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.VisioDiagramAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte>("Action")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("AuditTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("MapId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("VisioDiagramAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.VisioLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Height")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VisioDiagramId")
                        .HasColumnType("integer");

                    b.Property<double>("Width")
                        .HasColumnType("double precision");

                    b.Property<double>("X")
                        .HasColumnType("double precision");

                    b.Property<double>("Y")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("VisioDiagramId");

                    b.ToTable("VisioLocation");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.VisioLocationAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte>("Action")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("AuditTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<double>("Height")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VisioDiagramId")
                        .HasColumnType("integer");

                    b.Property<double>("Width")
                        .HasColumnType("double precision");

                    b.Property<double>("X")
                        .HasColumnType("double precision");

                    b.Property<double>("Y")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("VisioLocationAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.VisioSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VisioDiagramId")
                        .HasColumnType("integer");

                    b.Property<double>("X")
                        .HasColumnType("double precision");

                    b.Property<double>("Y")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.HasIndex("VisioDiagramId");

                    b.ToTable("VisioSite");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.VisioSiteAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte>("Action")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("AuditTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VisioDiagramId")
                        .HasColumnType("integer");

                    b.Property<double>("X")
                        .HasColumnType("double precision");

                    b.Property<double>("Y")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("VisioSiteAudit");
                });

            modelBuilder.Entity("ESys.Notification.Entity.EMail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<bool>("IsHtmlBody")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("SendDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EMail");
                });

            modelBuilder.Entity("ESys.Notification.Entity.EMailAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ContentId")
                        .HasColumnType("text");

                    b.Property<long>("EMailId")
                        .HasColumnType("bigint");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<bool>("UsedInBody")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("EMailId");

                    b.ToTable("EMailAttachment");
                });

            modelBuilder.Entity("ESys.Notification.Entity.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("NotificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("SiteId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("SiteId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("ESys.Notification.Entity.NotificationEMail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EMailId")
                        .HasColumnType("bigint");

                    b.Property<long>("NotificationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EMailId");

                    b.HasIndex("NotificationId");

                    b.ToTable("NotificationEMail");
                });

            modelBuilder.Entity("ESys.Notification.Entity.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EnDescription")
                        .HasColumnType("text");

                    b.Property<string>("EnName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ProcessorType")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ZhDescription")
                        .HasColumnType("text");

                    b.Property<string>("ZhName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NotificationType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Description = "Excursion",
                            EnDescription = "Excursion",
                            EnName = "Excursion",
                            IsActive = true,
                            Name = "Excursion",
                            Type = 1,
                            ZhDescription = "触发限度时发送通知",
                            ZhName = "超限"
                        },
                        new
                        {
                            Id = 2,
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Description = "Login Failure",
                            EnDescription = "Login Failure",
                            EnName = "Login Failure",
                            IsActive = true,
                            Name = "Login Failure",
                            Type = 2,
                            ZhDescription = "登录失败",
                            ZhName = "登录失败"
                        },
                        new
                        {
                            Id = 3,
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Description = "Invalid electronic signature was attempted.",
                            EnDescription = "Invalid electronic signature was attempted.",
                            EnName = "Invalid ESig",
                            IsActive = true,
                            Name = "Invalid ESig",
                            Type = 3,
                            ZhDescription = "无效电子签名",
                            ZhName = "无效电子签名"
                        },
                        new
                        {
                            Id = 4,
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Description = "A user account was locked.",
                            EnDescription = "A user account was locked.",
                            EnName = "Account Locked",
                            IsActive = true,
                            Name = "Account Locked",
                            Type = 4,
                            ZhDescription = "账户锁定",
                            ZhName = "账户锁定"
                        },
                        new
                        {
                            Id = 5,
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Description = "Work items in their first stage that have been scheduled but are not yet assigned.",
                            EnDescription = "Work items in their first stage that have been scheduled but are not yet assigned.",
                            EnName = "Scheduled Samples Not Assigned",
                            IsActive = true,
                            Name = "Scheduled Samples Not Assigned",
                            Type = 5,
                            ZhDescription = "任务项目已经添加进检验池如未被分配和领取，则在每日下午3点发送通知",
                            ZhName = "任务未启动"
                        },
                        new
                        {
                            Id = 6,
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Description = "The weekly test has not been completed.",
                            EnDescription = "The weekly test has not been completed.",
                            EnName = "Weekly Incomplete",
                            IsActive = true,
                            Name = "Weekly Incomplete",
                            Type = 6,
                            ZhDescription = "测试频率为每周的检验项目如果在周五还未完成，将会在下午3点发送通知",
                            ZhName = "周任务未完成"
                        },
                        new
                        {
                            Id = 7,
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Description = "The monthly test has not been completed.",
                            EnDescription = "The monthly test has not been completed.",
                            EnName = "Monthly Incomplete",
                            IsActive = true,
                            Name = "Monthly Incomplete",
                            Type = 7,
                            ZhDescription = "测试频率为每月的检验项目如果在当月25号还未完成，将会在下午3点发送通知",
                            ZhName = "月任务未完成"
                        },
                        new
                        {
                            Id = 8,
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Description = "The quarterly test has not been completed.",
                            IsActive = false,
                            Name = "Quarterly Incomplete",
                            Type = 8
                        },
                        new
                        {
                            Id = 9,
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Description = "Work items with a configured max time for a stage that are due within the next hour.",
                            IsActive = false,
                            Name = "Max Time About to Exceed",
                            Type = 9
                        },
                        new
                        {
                            Id = 10,
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Description = "Work items that have been assigned and scheduled for today but have not yet been completed.",
                            EnDescription = "Work items that have been assigned and scheduled for today but have not yet been completed.",
                            EnName = "Work Incomplete ",
                            IsActive = true,
                            Name = "Work Incomplete ",
                            Type = 10,
                            ZhDescription = "计划检测日期为当天的任务，如已经启动但未完成的，在当天下午3点发送通知",
                            ZhName = "当日任务未完成"
                        },
                        new
                        {
                            Id = 11,
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Description = "Organism Found",
                            IsActive = false,
                            Name = "Organism Found",
                            Type = 11
                        },
                        new
                        {
                            Id = 12,
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Description = "Organism Added To Organism Dictionary",
                            IsActive = false,
                            Name = "Organism Added To Organism Dictionary",
                            Type = 12
                        },
                        new
                        {
                            Id = 13,
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Description = "An error occurred processing a sample",
                            IsActive = false,
                            Name = "Workflow Error",
                            Type = 13
                        },
                        new
                        {
                            Id = 14,
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Description = "Equipment that is about to go out of calibration.",
                            IsActive = false,
                            Name = "Equipment About to Expire",
                            Type = 14
                        },
                        new
                        {
                            Id = 15,
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Description = "Media inventory is getting low.",
                            IsActive = false,
                            Name = "Media Inventory is Low",
                            Type = 15
                        },
                        new
                        {
                            Id = 16,
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Description = "User Qualification has lapsed.",
                            IsActive = false,
                            Name = "User Qualification Lapsed",
                            Type = 16
                        },
                        new
                        {
                            Id = 17,
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Description = "User Qualification is coming due.",
                            IsActive = false,
                            Name = "User Qualification Coming Due",
                            Type = 17
                        });
                });

            modelBuilder.Entity("ESys.Notification.Entity.NotificationV", b =>
                {
                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeviationId")
                        .HasColumnType("integer");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("integer");

                    b.Property<string>("EquipmentLocationBreadcrumb")
                        .HasColumnType("text");

                    b.Property<int?>("EquipmentLocationId")
                        .HasColumnType("integer");

                    b.Property<int?>("MediaId")
                        .HasColumnType("integer");

                    b.Property<string>("MediaLocationBreadcrumb")
                        .HasColumnType("text");

                    b.Property<int?>("MediaLocationId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("NotificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("NotificationId")
                        .HasColumnType("bigint");

                    b.Property<string>("NotificationTypeDesc")
                        .HasColumnType("text");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("NotificationTypeName")
                        .HasColumnType("text");

                    b.Property<long?>("SampleId")
                        .HasColumnType("bigint");

                    b.Property<string>("SiteDesc")
                        .HasColumnType("text");

                    b.Property<int?>("SiteId")
                        .HasColumnType("integer");

                    b.Property<string>("SiteLocationBreadcrumb")
                        .HasColumnType("text");

                    b.Property<int?>("SiteLocationId")
                        .HasColumnType("integer");

                    b.Property<string>("SiteName")
                        .HasColumnType("text");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("UserLocationBreadcrumb")
                        .HasColumnType("text");

                    b.Property<int?>("UserLocationId")
                        .HasColumnType("integer");

                    b.ToView("NotificationV");
                });

            modelBuilder.Entity("ESys.Notification.Entity.Subscription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("PlanGroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("ESys.Notification.Entity.SubscriptionV", b =>
                {
                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("EMail")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsLocationActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsNotificationTypeActive")
                        .HasColumnType("boolean");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("LocationName")
                        .HasColumnType("text");

                    b.Property<string>("NotificationTypeDescription")
                        .HasColumnType("text");

                    b.Property<int?>("NotificationTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("NotificationTypeName")
                        .HasColumnType("text");

                    b.Property<int?>("PlanGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("RealName")
                        .HasColumnType("text");

                    b.Property<long>("SubscriptionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("UserLocationBreadcrumb")
                        .HasColumnType("text");

                    b.Property<int?>("UserLocationId")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<int?>("UserStatus")
                        .HasColumnType("integer");

                    b.ToView("SubscriptionV");
                });

            modelBuilder.Entity("ESys.Security.Entity.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("Name");

                    b.HasIndex("ParentId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("ESys.Security.Entity.DepartmentAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte>("Action")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("AuditTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("DepartmentAudit");
                });

            modelBuilder.Entity("ESys.Security.Entity.ElectronicSignature", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Account")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text");

                    b.Property<bool>("IsSystemOperation")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("RealName")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("SignDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ElectronicSignature");
                });

            modelBuilder.Entity("ESys.Security.Entity.ElectronicSignatureItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ElectronicSignatureId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastAuditKey")
                        .HasColumnType("bigint");

                    b.Property<long?>("PrimaryKey")
                        .HasColumnType("bigint");

                    b.Property<string>("TableName")
                        .HasColumnType("text");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ElectronicSignatureId");

                    b.HasIndex("TableName", "PrimaryKey");

                    b.ToTable("ElectronicSignatureItem");
                });

            modelBuilder.Entity("ESys.Security.Entity.ESignConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Permissions")
                        .HasColumnType("text");

                    b.Property<int>("SignCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("Category", "IsActive");

                    b.ToTable("ESignConfig");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "plan",
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            IsActive = true,
                            Permissions = "Plan:Add,Plan:Edit",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 2,
                            Category = "addPlan",
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            IsActive = true,
                            Permissions = "Plan:Add",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 3,
                            Category = "editPlan",
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            IsActive = true,
                            Permissions = "Plan:Edit",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 4,
                            Category = "planReview",
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            IsActive = true,
                            Permissions = "Plan:Review",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 5,
                            Category = "planApprove",
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            IsActive = true,
                            Permissions = "Plan:Approve",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 6,
                            Category = "planEffective",
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            IsActive = true,
                            Permissions = "Plan:Effective",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 7,
                            Category = "planRetire",
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            IsActive = true,
                            Permissions = "Plan:Retire",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 8,
                            Category = "planAddToPool",
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            IsActive = true,
                            Permissions = "Plan:AddToPool",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 9,
                            Category = "receiveTask",
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            IsActive = true,
                            Permissions = "Missions:Receive",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 10,
                            Category = "assignTask",
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            IsActive = true,
                            Permissions = "MissionManagement:Assign",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 11,
                            Category = "executeTask",
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            IsActive = true,
                            Permissions = "Missions:Execute",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 12,
                            Category = "returnTask",
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            IsActive = true,
                            Permissions = "MissionManagement:Return,MyMissions:Return",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 13,
                            Category = "eSignTasks",
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            IsActive = true,
                            Permissions = "MyMissions:Execute,SampleCollection:Execute,ExperimentalOperations:Execute,Incubation:Execute,InspectionRecord:Execute",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 14,
                            Category = "noTest",
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            IsActive = true,
                            Permissions = "MissionManagement:NoTest,MyMissions:NoTest,SampleCollection:NoTest,ExperimentalOperations:NoTest,Incubation:NoTest,InspectionRecord:NoTest",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 15,
                            Category = "reTest",
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            IsActive = true,
                            Permissions = "MissionManagement:Resume",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 16,
                            Category = "auditReview",
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            IsActive = true,
                            Permissions = "SampleAudit:Review",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 17,
                            Category = "auditApprove",
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            IsActive = true,
                            Permissions = "SamplePrompt:Approval",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 18,
                            Category = "auditReApprove",
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            IsActive = true,
                            Permissions = "SampleCompleted:ReApprove",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 19,
                            Category = "auditEdit",
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            IsActive = true,
                            Permissions = "MissionManagement:Edit,SampleAudit:Edit",
                            SignCount = 0
                        });
                });

            modelBuilder.Entity("ESys.Security.Entity.ESignConfigAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte>("Action")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("AuditTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Permissions")
                        .HasColumnType("text");

                    b.Property<int>("SignCount")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ESignConfigAudit");
                });

            modelBuilder.Entity("ESys.Security.Entity.Log", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("ESys.Security.Entity.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("DepartFormatter")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("ParentId");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "system",
                            Description = "系统管理",
                            Order = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            Code = "region",
                            Description = "区域",
                            Order = 2,
                            ParentId = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            Code = "SiteType:Add",
                            Description = "添加采样点类型",
                            Order = 3,
                            ParentId = 2,
                            Type = 2
                        },
                        new
                        {
                            Id = 4,
                            Code = "SiteType:Edit",
                            Description = "编辑采样点类型",
                            Order = 4,
                            ParentId = 2,
                            Type = 2
                        },
                        new
                        {
                            Id = 5,
                            Code = "SiteType:Disable",
                            Description = "禁用采样点类型",
                            Order = 5,
                            ParentId = 2,
                            Type = 2
                        },
                        new
                        {
                            Id = 6,
                            Code = "LocationType:Add",
                            Description = "添加区域类型",
                            Order = 6,
                            ParentId = 2,
                            Type = 2
                        },
                        new
                        {
                            Id = 7,
                            Code = "LocationType:Edit",
                            Description = "编辑区域类型",
                            Order = 7,
                            ParentId = 2,
                            Type = 2
                        },
                        new
                        {
                            Id = 8,
                            Code = "LocationType:Disable",
                            Description = "禁用区域类型",
                            Order = 8,
                            ParentId = 2,
                            Type = 2
                        },
                        new
                        {
                            Id = 9,
                            Code = "Location:Add",
                            Description = "添加区域",
                            Order = 9,
                            ParentId = 2,
                            Type = 2
                        },
                        new
                        {
                            Id = 10,
                            Code = "Location:Edit",
                            Description = "编辑区域",
                            Order = 10,
                            ParentId = 2,
                            Type = 2
                        },
                        new
                        {
                            Id = 11,
                            Code = "Location:Disable",
                            Description = "禁用区域",
                            Order = 11,
                            ParentId = 2,
                            Type = 2
                        },
                        new
                        {
                            Id = 12,
                            Code = "production",
                            Description = "产品",
                            Order = 12,
                            ParentId = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 13,
                            Code = "Product:Add",
                            Description = "添加产品",
                            Order = 13,
                            ParentId = 12,
                            Type = 2
                        },
                        new
                        {
                            Id = 14,
                            Code = "Product:Edit",
                            Description = "编辑产品",
                            Order = 14,
                            ParentId = 12,
                            Type = 2
                        },
                        new
                        {
                            Id = 15,
                            Code = "Product:Disable",
                            Description = "禁用产品",
                            Order = 15,
                            ParentId = 12,
                            Type = 2
                        },
                        new
                        {
                            Id = 16,
                            Code = "device",
                            Description = "设备",
                            Order = 16,
                            ParentId = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 17,
                            Code = "Equipment:Add",
                            Description = "添加设备",
                            Order = 17,
                            ParentId = 16,
                            Type = 2
                        },
                        new
                        {
                            Id = 18,
                            Code = "Equipment:Edit",
                            Description = "编辑设备",
                            Order = 18,
                            ParentId = 16,
                            Type = 2
                        },
                        new
                        {
                            Id = 19,
                            Code = "Equipment:Disable",
                            Description = "禁用设备",
                            Order = 19,
                            ParentId = 16,
                            Type = 2
                        },
                        new
                        {
                            Id = 20,
                            Code = "Equipment:UpdateConfig",
                            Description = "上传文件",
                            Order = 20,
                            ParentId = 16,
                            Type = 2
                        },
                        new
                        {
                            Id = 21,
                            Code = "medium",
                            Description = "培养基",
                            Order = 21,
                            ParentId = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 22,
                            Code = "security",
                            Description = "安全",
                            Order = 22,
                            ParentId = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 23,
                            Code = "department",
                            Description = "部门管理",
                            Order = 23,
                            ParentId = 22,
                            Type = 1
                        },
                        new
                        {
                            Id = 24,
                            Code = "Department:Add",
                            Description = "添加部门",
                            Order = 24,
                            ParentId = 23,
                            Type = 2
                        },
                        new
                        {
                            Id = 25,
                            Code = "Department:Edit",
                            Description = "编辑部门",
                            Order = 25,
                            ParentId = 23,
                            Type = 2
                        },
                        new
                        {
                            Id = 26,
                            Code = "Department:Disable",
                            Description = "禁用部门",
                            Order = 26,
                            ParentId = 23,
                            Type = 2
                        },
                        new
                        {
                            Id = 27,
                            Code = "user",
                            Description = "用户管理",
                            Order = 27,
                            ParentId = 22,
                            Type = 1
                        },
                        new
                        {
                            Id = 28,
                            Code = "User:Add",
                            Description = "添加用户",
                            Order = 28,
                            ParentId = 27,
                            Type = 2
                        },
                        new
                        {
                            Id = 29,
                            Code = "User:Edit",
                            Description = "编辑用户",
                            Order = 29,
                            ParentId = 27,
                            Type = 2
                        },
                        new
                        {
                            Id = 30,
                            Code = "User:Disable",
                            Description = "禁用用户",
                            Order = 30,
                            ParentId = 27,
                            Type = 2
                        },
                        new
                        {
                            Id = 31,
                            Code = "User:Password",
                            Description = "修改密码",
                            Order = 31,
                            ParentId = 27,
                            Type = 2
                        },
                        new
                        {
                            Id = 32,
                            Code = "role",
                            Description = "角色管理",
                            Order = 32,
                            ParentId = 22,
                            Type = 1
                        },
                        new
                        {
                            Id = 33,
                            Code = "Role:Add",
                            Description = "添加角色",
                            Order = 33,
                            ParentId = 32,
                            Type = 2
                        },
                        new
                        {
                            Id = 34,
                            Code = "Role:Edit",
                            Description = "编辑角色",
                            Order = 34,
                            ParentId = 32,
                            Type = 2
                        },
                        new
                        {
                            Id = 35,
                            Code = "Role:Disable",
                            Description = "禁用角色",
                            Order = 35,
                            ParentId = 32,
                            Type = 2
                        },
                        new
                        {
                            Id = 36,
                            Code = "booking",
                            Description = "预订管理",
                            Order = 36,
                            ParentId = 22,
                            Type = 1
                        },
                        new
                        {
                            Id = 37,
                            Code = "Subscription:Edit",
                            Description = "编辑警告订阅",
                            Order = 37,
                            ParentId = 36,
                            Type = 2
                        },
                        new
                        {
                            Id = 38,
                            Code = "Subscription:Disable",
                            Description = "禁用警告订阅",
                            Order = 38,
                            ParentId = 36,
                            Type = 2
                        },
                        new
                        {
                            Id = 39,
                            Code = "settings",
                            Description = "系统设置",
                            Order = 39,
                            ParentId = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 40,
                            Code = "Security:Password",
                            Description = "配置密码",
                            Order = 40,
                            ParentId = 39,
                            Type = 1
                        },
                        new
                        {
                            Id = 41,
                            Code = "Security:Email",
                            Description = "配置邮箱",
                            Order = 41,
                            ParentId = 39,
                            Type = 1
                        },
                        new
                        {
                            Id = 42,
                            Code = "log",
                            Description = "日志",
                            Order = 42,
                            ParentId = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 43,
                            Code = "visualization",
                            Description = "可视化",
                            Order = 43,
                            Type = 1
                        },
                        new
                        {
                            Id = 44,
                            Code = "map",
                            Description = "地图管理",
                            Order = 44,
                            ParentId = 43,
                            Type = 1
                        },
                        new
                        {
                            Id = 45,
                            Code = "Map:Add",
                            Description = "添加地图",
                            Order = 45,
                            ParentId = 44,
                            Type = 2
                        },
                        new
                        {
                            Id = 46,
                            Code = "Map:Disable",
                            Description = "禁用地图",
                            Order = 46,
                            ParentId = 44,
                            Type = 2
                        },
                        new
                        {
                            Id = 47,
                            Code = "Map:Edit",
                            Description = "编辑地图",
                            Order = 47,
                            ParentId = 44,
                            Type = 2
                        },
                        new
                        {
                            Id = 48,
                            Code = "MapCategory:Add",
                            Description = "添加地图分类",
                            Order = 48,
                            ParentId = 44,
                            Type = 2
                        },
                        new
                        {
                            Id = 49,
                            Code = "MapCategory:Disable",
                            Description = "禁用地图分类",
                            Order = 49,
                            ParentId = 44,
                            Type = 2
                        },
                        new
                        {
                            Id = 50,
                            Code = "MapCategory:Edit",
                            Description = "编辑地图分类",
                            Order = 50,
                            ParentId = 44,
                            Type = 2
                        },
                        new
                        {
                            Id = 51,
                            Code = "visualizations",
                            Description = "可视化呈现",
                            Order = 51,
                            ParentId = 43,
                            Type = 1
                        },
                        new
                        {
                            Id = 52,
                            Code = "equipment",
                            Description = "设备维护",
                            Order = 52,
                            Type = 1
                        },
                        new
                        {
                            Id = 53,
                            Code = "equipmentTPM",
                            Description = "设备维护",
                            Order = 53,
                            ParentId = 52,
                            Type = 1
                        },
                        new
                        {
                            Id = 54,
                            Code = "equipmentTPM:Add",
                            Description = "添加维护单",
                            Order = 54,
                            ParentId = 53,
                            Type = 2
                        },
                        new
                        {
                            Id = 55,
                            Code = "equipmentTPMList",
                            Description = "设备维护单列表",
                            Order = 55,
                            ParentId = 52,
                            Type = 1
                        },
                        new
                        {
                            Id = 56,
                            Code = "equipmentTPM:Export",
                            Description = "导出维护单",
                            Order = 56,
                            ParentId = 55,
                            Type = 2
                        },
                        new
                        {
                            Id = 57,
                            Code = "equipmentTPM:Edit",
                            Description = "编辑维护单",
                            Order = 57,
                            ParentId = 55,
                            Type = 2
                        },
                        new
                        {
                            Id = 58,
                            Code = "equipmentTPM:Disable",
                            Description = "禁用维护单",
                            Order = 58,
                            ParentId = 55,
                            Type = 2
                        });
                });

            modelBuilder.Entity("ESys.Security.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            IsActive = true,
                            IsHidden = true,
                            Name = "超级管理员"
                        },
                        new
                        {
                            Id = 2,
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            IsActive = true,
                            IsHidden = false,
                            Name = "管理员"
                        });
                });

            modelBuilder.Entity("ESys.Security.Entity.RoleAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte>("Action")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("AuditTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("RoleAudit");
                });

            modelBuilder.Entity("ESys.Security.Entity.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateBy = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 2,
                            CreateBy = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreateBy = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreateBy = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionId = 4,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("ESys.Security.Entity.RolePermissionAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte>("Action")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("AuditTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("RolePermissionAudit");
                });

            modelBuilder.Entity("ESys.Security.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Account")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("EMail")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("InitialQualificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LastMonitoredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("LastPasswordModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("NextQualificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("PasswordExpiryPeriod")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("RealName")
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Account")
                        .IsUnique();

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LocationId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Account = "super",
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            IsActive = true,
                            IsHidden = true,
                            Password = "l8YyUDcfKuGGgLaMKT4E6mg/8ClZOK8tczolqvakrA8=",
                            Salt = "f5ZTUveTZ6szf7wR3qCmvg==",
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            Account = "ESys_Admin",
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            IsActive = true,
                            IsHidden = true,
                            Password = "gIbsDs1b73xjUyptJmm1RjjX8HiJ3ubnt1F/mS6mzio=",
                            Salt = "kCXBD/crXrivLJwcfWEoHQ==",
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            Account = "Admin",
                            CreateBy = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            IsActive = true,
                            IsHidden = false,
                            Password = "QnVVjchwQROIbFPB7PrnYD3htnV5F4AJrfWnsej4JQk=",
                            RealName = "Admin",
                            Salt = "tJ48HTFvFBHIWRnO8pxLpQ==",
                            Status = 0
                        });
                });

            modelBuilder.Entity("ESys.Security.Entity.UserAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Account")
                        .HasColumnType("text");

                    b.Property<byte>("Action")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("AuditTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("EMail")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("text");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("InitialQualificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LastMonitoredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("LastPasswordModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("NextQualificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("PasswordExpiryPeriod")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("RealName")
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("UserAudit");
                });

            modelBuilder.Entity("ESys.Security.Entity.UserHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("Logined")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserHistory");
                });

            modelBuilder.Entity("ESys.Security.Entity.UserPasswordHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .HasColumnType("text");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPasswordHistory");
                });

            modelBuilder.Entity("ESys.Security.Entity.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DashboardConfig")
                        .HasColumnType("text");

                    b.Property<string>("Locale")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("UserSettings")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("ESys.Security.Entity.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateBy = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreateBy = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 2,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("ESys.Security.Entity.UserRoleAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte>("Action")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("AuditTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("UserRoleAudit");
                });

            modelBuilder.Entity("ESys.Security.Entity.UserV", b =>
                {
                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("text");

                    b.Property<string>("EMail")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("text");

                    b.Property<bool>("HasAccess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<string>("LocationBreadcrumb")
                        .HasColumnType("text");

                    b.Property<string>("LocationFullName")
                        .HasColumnType("text");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("LocationName")
                        .HasColumnType("text");

                    b.Property<string>("RealName")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.ToView("UserV");
                });

            modelBuilder.Entity("ESys.System.Entity.ConfigItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Property")
                        .HasColumnType("text");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ConfigItem");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateBy = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Property = "LOCATION_TYPE_WEIGHT_LEVEL_COUNT",
                            Value = "8"
                        });
                });

            modelBuilder.Entity("ESys.System.Entity.ConfigItemAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte>("Action")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("AuditTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<string>("Property")
                        .HasColumnType("text");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ConfigItemAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Equipment", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.EquipmentConfig", "EquipmentConfig")
                        .WithOne()
                        .HasForeignKey("ESys.Infrastructure.Entity.Equipment", "EquipmentConfigId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Infrastructure.Entity.EquipmentType", "EquipmentType")
                        .WithMany()
                        .HasForeignKey("EquipmentTypeId");

                    b.HasOne("ESys.Infrastructure.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("EquipmentConfig");

                    b.Navigation("EquipmentType");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.EquipmentNotification", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.Equipment", "Equipment")
                        .WithMany("EquipmentNotification")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.EquipmentTPM", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.Equipment", "Equipment")
                        .WithMany("EquipmentTPMs")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Location", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.LocationType", "LocationType")
                        .WithMany("Locations")
                        .HasForeignKey("LocationTypeId")
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.Location", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ESys.Infrastructure.Entity.VisioDiagram", "VisioDiagram")
                        .WithMany()
                        .HasForeignKey("VisioDiagramId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LocationType");

                    b.Navigation("Parent");

                    b.Navigation("VisioDiagram");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LocationExtra", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.Location", "Location")
                        .WithOne("LocationExtra")
                        .HasForeignKey("ESys.Infrastructure.Entity.LocationExtra", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Map", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.MapCategory", "MapCategory")
                        .WithMany("Maps")
                        .HasForeignKey("MapCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("MapCategory");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.MapCategory", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.Map", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Product", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Site", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.Location", "Location")
                        .WithMany("Sites")
                        .HasForeignKey("LocationId")
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.SiteType", "SiteType")
                        .WithMany("Sites")
                        .HasForeignKey("SiteTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("SiteType");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.VisioDiagram", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.Map", "Map")
                        .WithMany("VisioDiagrams")
                        .HasForeignKey("MapId")
                        .IsRequired();

                    b.Navigation("Map");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.VisioLocation", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.VisioDiagram", "VisioDiagram")
                        .WithMany("VisioLocations")
                        .HasForeignKey("VisioDiagramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("VisioDiagram");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.VisioSite", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.VisioDiagram", "VisioDiagram")
                        .WithMany("VisioSites")
                        .HasForeignKey("VisioDiagramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");

                    b.Navigation("VisioDiagram");
                });

            modelBuilder.Entity("ESys.Notification.Entity.EMail", b =>
                {
                    b.HasOne("ESys.Security.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESys.Notification.Entity.EMailAttachment", b =>
                {
                    b.HasOne("ESys.Notification.Entity.EMail", "EMail")
                        .WithMany("Attachments")
                        .HasForeignKey("EMailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EMail");
                });

            modelBuilder.Entity("ESys.Notification.Entity.Notification", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESys.Notification.Entity.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESys.Security.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Equipment");

                    b.Navigation("NotificationType");

                    b.Navigation("Site");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESys.Notification.Entity.NotificationEMail", b =>
                {
                    b.HasOne("ESys.Notification.Entity.EMail", "EMail")
                        .WithMany("NotificationEMails")
                        .HasForeignKey("EMailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Notification.Entity.Notification", "Notification")
                        .WithMany("NotificationEMails")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EMail");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("ESys.Notification.Entity.Subscription", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESys.Notification.Entity.NotificationType", "NotificationType")
                        .WithMany("Subscriptions")
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Security.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Location");

                    b.Navigation("NotificationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESys.Security.Entity.Department", b =>
                {
                    b.HasOne("ESys.Security.Entity.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("ESys.Security.Entity.Department", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Manager");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ESys.Security.Entity.ElectronicSignature", b =>
                {
                    b.HasOne("ESys.Security.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESys.Security.Entity.ElectronicSignatureItem", b =>
                {
                    b.HasOne("ESys.Security.Entity.ElectronicSignature", "ElectronicSignature")
                        .WithMany("ElectronicSignatureItems")
                        .HasForeignKey("ElectronicSignatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ElectronicSignature");
                });

            modelBuilder.Entity("ESys.Security.Entity.Permission", b =>
                {
                    b.HasOne("ESys.Security.Entity.Permission", "Parent")
                        .WithMany("SubPermissions")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ESys.Security.Entity.RolePermission", b =>
                {
                    b.HasOne("ESys.Security.Entity.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Security.Entity.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ESys.Security.Entity.User", b =>
                {
                    b.HasOne("ESys.Security.Entity.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ESys.Infrastructure.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Department");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ESys.Security.Entity.UserHistory", b =>
                {
                    b.HasOne("ESys.Security.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESys.Security.Entity.UserPasswordHistory", b =>
                {
                    b.HasOne("ESys.Security.Entity.User", "User")
                        .WithMany("UserPasswordHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESys.Security.Entity.UserProfile", b =>
                {
                    b.HasOne("ESys.Security.Entity.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("ESys.Security.Entity.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESys.Security.Entity.UserRole", b =>
                {
                    b.HasOne("ESys.Security.Entity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Security.Entity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Equipment", b =>
                {
                    b.Navigation("EquipmentNotification");

                    b.Navigation("EquipmentTPMs");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Location", b =>
                {
                    b.Navigation("LocationExtra");

                    b.Navigation("Sites");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LocationType", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Map", b =>
                {
                    b.Navigation("VisioDiagrams");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.MapCategory", b =>
                {
                    b.Navigation("Maps");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.SiteType", b =>
                {
                    b.Navigation("Sites");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.VisioDiagram", b =>
                {
                    b.Navigation("VisioLocations");

                    b.Navigation("VisioSites");
                });

            modelBuilder.Entity("ESys.Notification.Entity.EMail", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("NotificationEMails");
                });

            modelBuilder.Entity("ESys.Notification.Entity.Notification", b =>
                {
                    b.Navigation("NotificationEMails");
                });

            modelBuilder.Entity("ESys.Notification.Entity.NotificationType", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("ESys.Security.Entity.Department", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ESys.Security.Entity.ElectronicSignature", b =>
                {
                    b.Navigation("ElectronicSignatureItems");
                });

            modelBuilder.Entity("ESys.Security.Entity.Permission", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("SubPermissions");
                });

            modelBuilder.Entity("ESys.Security.Entity.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ESys.Security.Entity.User", b =>
                {
                    b.Navigation("Profile");

                    b.Navigation("UserPasswordHistories");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
